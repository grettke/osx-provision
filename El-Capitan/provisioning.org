* Goal
:PROPERTIES:
:ID:       572893EF-E80B-411B-9355-8CAB3DB23C27
:END:

** Desire
:PROPERTIES:
:ID:       17BA9F22-3B3E-427E-AC9B-0DF8D10BFD32
:END:

- To quickly and easily
  - Explore cognitive spaces using operating systems and software
  - Try, fail, learn, improve, and repeat
  - For expensive operations measured in time and complexity
    - Minimize their execution time
      - Central Processing Unit (CPU)
      - Input/Output (IO)
    - Rebound from failure
  - Share

** Satisfaction
:PROPERTIES:
:ID:       77F8D1AF-B388-4512-B9C2-79F97533CC88
:END:

- First-class support for OS X, Windows, Linux and all of their software
- Manage machines as easily and flexibly as you would with version control
- Use the fastest devices possible for every operation
- First class operating system image management
- Virtual machines (VM)

** Decision
:PROPERTIES:
:ID:       643E82D4-08E8-40B5-9006-3936A0775A35
:END:

- Current:
  - Macintosh Computer (Mac)
  - OS X
  - VMWare Fusion Professional
- With /Best/:
  - Solid State Disk (SSD)
  - RAM
  - CPU count and speed

** Lessons Learned
:PROPERTIES:
:ID:       0D8B4834-2E1E-4F1A-9299-5948A1FFAC55
:END:

- Verify easily verifiable operations
  - Installation scripts often reveal new information
- Either name things with a meaningful name or a 6 digit UUID from
  [[https://www.uuidgenerator.net/][Online UUID Generator]]
  - In the beginning this helped me keep track of disks, VMs, and software;
    by working through it I found that names were more meaningful, only after
    developing the sections for the defition (and name)
- Evidence based; no fantasy or delusion
  - Decide using experience; in absence make a best decision and move on
  - It takes at least 3 iterations before things start making sense
- "Thinking ahead" is crippling
- Snapshot
  - After expensive operations
    - Can always delete them later
    - Easy to for get how to do
  - Snapshot frequently; you never know how things will go
    - You will forget to do this
    - You will only care after something got wrecked
- Don't go to sleep in the middle of configuration sections
- Get the fastest Internet sold before starting
- Remember that Control-Command-F pressed inside of a host tells VMWare
  to go to and from full-screen.
- VMWare's folder sharing
  - Works perfectly for sharing between two guests a lot of the time. When it
    quits working I log in and out of one of the guests and it works again
    - Happens often
  - Is happy with Finder and unhappy with Eshell, so don't use Eshell in shared
    directories. They just stop working.
- Java
  - Sometimes the installation directory includes the build number. Sometimes
    it does not.
- Writing 100% automated idempotent scripts is worth the effort
  - It is not worth the effort for theoretical reasons because it is usually
    faster to do it by hand. The first 2 or 3 times you perform a task, it is
    slow, and then you figure it how to do it all correctly and then you can
    perform it quickly. You might ask yourself "If I can do it this quickly then
    why bother automated it?" because of the extra effort. That is a good
    question. When you are doing it, it is faster to do it by hand. Here is the
    problem that I ran into: you make mistakes that you find long after the
    set up. The /right/ thing to do is to correct the documentation/scripts and
    then rebuild the image. If you left manual steps then you have to do that
    work all over again. I know this seems obvious, but at the time, it didn't
    seem worth the effort of automating everything. Now much later, I'm left
    with a system imaged somewhat differently than the documentation. It is
    worth the effort to automate everything. The item on snapshotting makes this
    eaiser.
- Never allow manual steps
  - If they are unavoidable then move them all to the same place to get them
    over with and start the automated part
- Make VMWare Disk Drive capacity in multiples of 8
  - That way they can be easily shared and transferred on SD cards
- VMWare Fusion hard disk size
  - VMWare does not pre-allocate disk space and doesn't give you the option
    to do so. This is different than VMWare Workstation and that might surprise
    you.
- Spending most of my time on OSX
  - Started out planning on using 100% OSX. That led me to realize that I
    value OSS/Emacs the most. So I started to set up Linux. Through that effort
    I realized how much I've invested on the OSX platform. I felt that not only
    would it take too much additional effort to migrated to Linux; but more-so
    that the investment would take away from future work I would be doing on
    OSX. Both thing are surprising.
- A new to me option is to download everything and don't configure it until you
  need it
  - Pros
    - Faster setup
    - Only use what you need
    - Nothing stopping you from configuring anything; key is to know what you
      want immediately available when you restore a snapshot or image, assuming
      that it is not automatically configurable or you don't want to
      automatically configure it (which is rare)

* Dictionary

- Install OS X El Capitan Application (IOSXECA)
  - Application used to
    - Upgrade current installation to 10.11
    - Create USB boot-disks to install 10.11
    - Drag into VMWare Fusion to install guests
- Pristine Host Operating System Image (PHOSI)
  - A hard disk imaged from Apple
- Pristine Host Operating System Disk Image (PHOSDI)
  - A disk-image created from a ~PHOSI~

* Guest Configuration
:PROPERTIES:
:ID:       2A536BBD-5CF0-43B8-A87C-9E2260ADE2F5
:END:
** Base (09d89d)
:PROPERTIES:
:ID:       33FE2B6C-EE9E-407E-96C3-41675669C9AE
:END:

- Configured with a =sysop= like above
- Unprovisioned
- Used for quickly cloning for user for anything

**** Steps
:PROPERTIES:
:ID:       CC55FA18-ADF8-4FE2-AA8E-477A3449F86F
:END:

- Obtain ~IOSEXECA~ via the App Store
  - Can do this on a Mac or in a VM of a prior version of OSX
  - Back it up to both =External:Storage= and =Host:Storage=
- Start VMWare Fusion, click File \rarr New, the "Select the Installation Method"
  dialog appears
- Create a new machine by dragging the OS X Installer onto the dialog
- Continue
- Default configuration don't change anything
  - 40GB HD, 2 CPU, 2GB RAM seems fine and allows you to have another VM
    running for notes during configuration
  - Assuming that 40GB will be enough to allow OS updates as they occur over
    the lifetime of the operating system
  - Full-Clones will configure the machine in unique ways not worth capturing
    here
- Click Finish
  - Name it "El Capitan - Base (09d89d)" and leave all of the default machine configuration
    alone
- Installation takes 20m every time
  - Installer reports "35s remaining" accurately, and then 0s remaining
    inaccurately, and sits there for about 5 minutes
  - Then it reports 20m remaining, and completes in 15m
  any personal information or configuration
- Set up box and create =sysop=, don't configure, don't provision:
  - Use the name =sysop= and password =sysop=
  - Don't do it like you set up the host
  - Don't provision or customize anything
  - Don't set up printers or resolution
  - Just create the account and do nothing more
- Shutdown

**** Snapshots
:PROPERTIES:
:ID:       7DB397B7-D0EC-4AD1-9BC8-3B80452D8890
:END:

***** First Run (d0a475)
:PROPERTIES:
:ID:       9F90A8E9-E4B3-486D-A9BD-243EF10CEAF1
:END:

- Installed, created user, shutdown
- This was the first run

** Personal (3a546a)
:PROPERTIES:
:ID:       E6395620-7A49-4FEC-9E06-15B27C1FC21C
:END:

*** Base (3d4a52)
:PROPERTIES:
:ID:       0B390891-5510-4703-97D7-29949F3D4436
:END:
**** Plan
:PROPERTIES:
:ID:       0967F184-B4A0-4B24-AB0D-5D3E95C3BB13
:END:
- *Full-Clone of 09d89d*
  - Right Click d0a475 \rarr Create Full Clone\ldots
  - Named "El Capitan - gcr (3a546a)"
- Machine config
  - Processors
    - 3 cores
      - [[https://pubs.vmware.com/fusion-7/index.jsp?topic=%252Fcom.vmware.fusion.help.doc%252FGUID-4EABCE73-69AB-4665-A5BB-B34C5B736CC7.html][Choosing]]
    - 6144 RAM
    - Enable hypervisor
    - Enable code profiling
  - Hard Disk
    - 250.00 GB HD
  - Sharing
    - =Host:Storage=
- Start the VM
- Resize the disk
  - Note that on a real Mac you can't resize a partition that OS X has
    booted from so you might boot from the Recovery Parittion to perform
    the resize instead. This doesn't work on the VMWare drive. If you try it,
    it will fail for a couple of reasons like "The partition is not journaled"
    or "The operation filed". Instead, boot into the OS and resize the partition
    there.
  - Start Disk Utility
  - Choose VMWare Virtual SATA Hard Drive Media
  - Click "Partition"
  - Look at it to get a sense of the space for the main partition and what is
    actually available
  - Close Disk Utility
  - Read [[https://themacwrangler.wordpress.com/2015/10/21/resizing-el-capitan-mac-volumes-under-vmware-fusion/][this]] for a reference
  - Open Terminal
  - Execute:
    #+NAME: 1C325C18-9A6B-4A33-A969-42CC4DBE0598
    #+BEGIN_SRC sh
    sudo diskutil resizeVolume / R
    #+END_SRC
  - View the results, they should be what you expect
  - Verify in Disk Utility
- Change =sysop= password
- Install VMWare Tools
  - In El Capitan, the display driver works correctly so you can set any
    resolution via VMWare Fusion. You can verify in the VM.
- Provision this machine
  - Use the UUID
- Perform the "Manual Steps" setup for the sysop user on this box just like the
  host
  - The host =sysop= instruction note things unique to the host and guest
- Provision =sysop=
- Create, login as, perform the "Manual Stes", and provision =gcr=,
  log out and in again
- Install software updates via App Store
- Shutdown

*** Xcode (39e716)
:PROPERTIES:
:ID:       87802E09-F643-468B-819B-3C8EEB2D3E09
:END:

Downloading Xcode takes a long time so snapshot it.

**** Plan
:PROPERTIES:
:ID:       4688E28F-F55F-444F-96DF-CDE4CED3C08D
:END:

***** Little Snitch
:PROPERTIES:
:ID:       19ACB164-B255-4F8D-916D-557975884C1C
:END:

Manually install and license it. Required to track download activity and speed.

The App Store reports downloade status under "Purchased".

***** Install XCode
:PROPERTIES:
:ID:       1094C0BB-F13F-4D43-8AAF-3432E8A9BB95
:END:

I want Xcode. I want the CLT. I want the IDE and more. Everyone
seems to be happy when you install in that order.

Go to the App Store and install Xcode.

You must start Xcode and agree to its licensing. Afterwards, close it.

***** Install CLT
:PROPERTIES:
:ID:       6164B479-E80F-4506-A4E5-DC5ABFBD3F81
:END:

Now install the CLT. Choose *Install*.

#+NAME: E0FB4DC2-E07D-4462-A997-99E112066E37
#+BEGIN_SRC shell
xcode-select --install
#+END_SRC

*** VC/Shell (283c98)
:PROPERTIES:
:ID:       C31C9412-2922-4E4A-80BB-20749A95D742
:END:

Configuring Git, the working copies, and support tools takes a long time so
snapshot it. I don't want to have =.profile= defined two places, so I define two
of them in this document and rename them when I deploy the system. Since I had
Git, I configured the Terminal after checking out a working copy for it. I
checked out all of the projects that I'm likely to use because this and the
next section are closely related. I don't consider the system usable until
installing and configuring EMACS.

**** Plan
:PROPERTIES:
:ID:       C39854E4-8FA7-42AF-9DDC-E62A96123965
:END:
***** Bash
:PROPERTIES:
:ID:       223C4BB3-2F4D-418C-93B4-8AFF0801BD43
:END:

[[http://clubmate.fi/upgrade-to-bash-4-in-mac-os-x/][Via]]. Run this by hand. Restart Terminal.

#+NAME: ADE3737D-A638-4BBD-9DD5-C42681EA1C0D
#+BEGIN_SRC shell
brew install bash
sudo bash -c 'echo /usr/local/bin/bash >> /etc/shells'
chsh -s /usr/local/bin/bash
echo $BASH_VERSION
#+END_SRC

#+NAME: D2D2A924-C72F-48E5-B709-550D19B0C158
#+BEGIN_SRC org :org-ref configuration-common-manual-followup.

#+END_SRC

***** Brew and BrewCask
:PROPERTIES:
:ID:       571FE633-5DC4-411B-8B5C-62F572125326
:END:

Install both.

Brew is [[http://brew.sh][here]].

BrewCask is [[http://caskroom.io][here]].

***** Java
:PROPERTIES:
:ID:       F0B50014-1E62-4182-9628-CA5EC737B41A
:END:

#+NAME: 41DCC7AD-FC9C-4EF5-9A1A-A43C22991B3D
#+BEGIN_SRC shell
brew cask install java
#+END_SRC
***** Fonts
:PROPERTIES:
:ID:       03993E03-45DF-498A-B197-283C61313E39
:END:

These could be used by any app; but they are defined specifically for use by
Emacs later on. DeltaWalker uses DejaVuSans Mono for example.

Add the font tap.

#+NAME: F39B442C-E329-4604-8A1A-EF4681A6AC31
#+BEGIN_SRC shell
brew tap caskroom/fonts
#+END_SRC

Install them automatically.

#+NAME: 59BFD86F-ED4D-4D50-85CC-BDE92854E153
#+BEGIN_SRC shell
brew cask install font-dejavu-sans
brew cask install font-quivira
brew cask install font-noto-sans
brew cask install font-noto-sans-symbols
brew cask install font-symbola
#+END_SRC

Basic test using =view-hello-file=.

***** Deltawalker
:PROPERTIES:
:ID:       D8E6483D-FF38-4A25-BA43-3CA7516B8789
:END:

#+NAME: 82653612-8AFE-4FF7-86D8-921DDA662EB9
#+BEGIN_SRC shell
brew cask install deltawalker
#+END_SRC

Got to it's Cellar location and drag it into Applications.

License it.

Set up the "Compare with DeltaWalker.workflow" by following the directions
- Copying it to the user library
- Opening it in Automator by double clicking it in Finder

- Set preferences for new comparisons (be sure of this, easy not to)
  - General
    - Date formatting: English (United States)
    - Max available memory: 1024
    - [X] Automatically find new updates and notify me
    - Colors and Fonts
      - Basic::Text Font and Text Editor Block Selection Font: DJSM 14
      - Differences::Font: DJSM 14
  - All Comparisons
    - [ ] Use text differencing optimized for speed
    - [X] Use text differencing optimized for accuracy
    - [X] Follow symbolic links
    - [ ] Ignore differences in whitespace
      - Want to know about tabs versus spaces
    - [ ] Ignore differences in character case
      - Interesting but default do care
    - [X] Ignore differences in line endings (CF and LF)
      - Most systems don't care

There are files to test with [[/opt/homebrew-cask/Caskroom/deltawalker/2.1.2/Extras/samples%0A][here]]. Test them using the Finder integration.

After Git it set up, test it there ,too.

***** Profile
:PROPERTIES:
:ID:       214656DF-ED9E-43B6-9E77-71BB88E6BC9C
:END:

#+NAME: pbod1
#+BEGIN_SRC sh
export VISUAL=vim
export EDITOR='$VISUAL'
export PS1='\u@\h:\w> '
export HOMEBREW_NO_EMOJI=1
export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home"
alias cg='find . -maxdepth 1 -type d \( ! -name . \) -exec bash -c "cd '{}' &&
pwd && git st" \;'
#+END_SRC

#+NAME: ppathpre
#+BEGIN_SRC sh
/usr/local/bin
#+END_SRC

#+NAME: ppathpost
#+BEGIN_SRC sh
$JAVA_HOME/bin:$PATH
#+END_SRC

#+NAME: 25086576-D16D-45F4-9141-1A45E2C8F8FD
#+BEGIN_SRC shell :tangle ./profile-vc :noweb yes :comments no
<<pbod1>>
export PATH=<<ppathpre>>:<<ppathpost>>
#+END_SRC

***** Git Setup
   :PROPERTIES:
   :tangle:   git.sh
   :comments: no
   :ID:       5CA6B1A3-079D-4D1E-A20A-DFC8E19A68CD
   :END:

This script is *not* idempotent.

This script is set up to me. To customize it just search and replace on:
- gcr@wisdomandwonder.com :: your email address for your SSH key
- orion :: the host name where this key lives
- gcr :: your username using this key
- =orgion_gcr_rsa= :: the name of your key used for Git
- github-grettke :: your SSH alias for Github
- bitbucket-grettke :: your SSH alias for Bitbucket

Execute it to perform all of the steps.

Aggressively debug.

#+NAME: B807D882-CDAB-4029-9FFE-FB967D0DB38F
#+BEGIN_SRC sh
set -x
#+END_SRC

Install git; don't use the built-in.

#+NAME: 681F11A6-332E-424B-B878-CEF576BAAD1D
#+BEGIN_SRC sh
brew install git
#+END_SRC

Generate the key. There is no passphrase.
#+NAME: 41FF7AA3-8273-4281-A7E8-C60B048723D4
#+begin_src sh
mkdir ~/.ssh
cd ~/.ssh
ssh-keygen -N '' -t rsa -C "gcr@wisdomandwonder.com" -f orion_gcr_rsa
#+end_src

Set permissions so that =ssh= will run.

#+NAME: 298B36CF-28A0-45CC-BACF-787EAB06F348
#+begin_src sh
chmod 600 ~/.ssh/orion_gcr_rsa
chmod 600 ~/.ssh/orion_gcr_rsa.pub
ssh-add -K ~/.ssh/orion_gcr_rsa
#+end_src

OSX creates this directory everywhere and it must be ignored.
#+NAME: F17E2D3C-13C1-4E89-8BB7-DD2276BE9D21

#+NAME: 53F16E84-34DC-48D1-998C-B9214B32AD1E
#+begin_src sh
echo .DS_Store >> ~/.gitignore_global
git config --global core.excludesfile ~/.gitignore_global
#+end_src

Add they key to Bitbucket and Github.

#+NAME: 3934CA71-20AE-4136-AB57-1DEF8EBC0ADB
#+begin_src sh
cat ~/.ssh/orion_gcr_rsa.pub | pbcopy
read -p "The new key is in your clipboard. Go and add this key to BitBucket and GitHub. When you are finished, hit [enter] to continue."
#+end_src

Set up ~/.ssh/config.

#+NAME: 70D5D9F2-6CFC-4FB5-BC45-416B4ABA029F
#+begin_src sh
cat > ~/.ssh/config << EOF
Host github-grettke
     HostName github.com
     User git
     PreferredAuthentications publickey
     IdentityFile ~/.ssh/orion_gcr_rsa.pub
Host bitbucket-grettke
     HostName bitbucket.org
     User git
     PreferredAuthentications publickey
     IdentityFile ~/.ssh/orion_gcr_rsa.pub
EOF
#+end_src

Test each one out.

#+NAME: 07933181-5F02-43CB-9DF8-232DA213E4BB
#+begin_src sh
ssh -T github-grettke
read -p "Did it work? If not, fix it."
#+end_src

Separate them to allow for easier copy-pasting.

#+NAME: 66DAC891-FB97-48A8-9C8B-0292095F13A6
#+begin_src sh
ssh -T bitbucket-grettke
read -p "Did it work? If not, fix it."
#+end_src

Set up my preferences.

#+NAME: C85D0036-9DDA-4786-9621-470FB418BBD6
#+begin_src sh
git config --global user.name "Grant Rettke"
git config --global user.email gcr@wisdomandwonder.com
git config --global color.ui true
git config --global core.autocrlf
git config --global alias.st status
git config --global alias.ci commit
git config --global alias.dt difftool
git config --global alias.mt mergetool
git config --global diff.tool deltawalker
git config --global difftool.deltawalker.cmd '/Applications/DeltaWalker.app/Contents/MacOS/git-diff $LOCAL $REMOTE'
git config --global difftool.prompt false
git config --global merge.tool deltawalker
git config --global mergetool.deltawalker.cmd '/Applications/DeltaWalker.app/Contents/MacOS/git-merge $LOCAL $REMOTE $BASE $MERGED'
git config --global mergetool.keepBackup false
#+end_src

Check out projects to get basic stuff working.

#+NAME: 5BD1669B-8E2A-46B5-AB80-88DA5764DEEB
#+begin_src sh
mkdir -p ~/git/bitbucket
mkdir -p ~/git/github
mkdir -p ~/git/github-anonq
mkdir -p ~/src
cd ~/git/bitbucket
git clone bitbucket-grettke:grettke/list.git
git clone bitbucket-grettke:grettke/resume.git
git clone bitbucket-grettke:grettke/notes.git
git clone bitbucket-grettke:grettke/signature.git
git clone bitbucket-grettke:grettke/grant-personal.git
git clone bitbucket-grettke:grettke/correspondence.git
cd ./correspondence
ln -s ../signature/GCR-PixelMator-PNG-Export.png GCR-PixelMator-PNG-Export.png
cd ..
git clone bitbucket-grettke:grettke/texmf.git
cd ~/git/github
git clone github-grettke:grettke/osx-provision.git
cd ~/git/github-anon
git clone https://github.com/tomislav/osx-terminal.app-colors-solarized.git
git clone https://github.com/bkuhlmann/osx
git clone https://github.com/monfresh/laptop
cd ~/src
git clone github-grettke:grettke/help.git
#+end_src

Test DeltaWalker integration.

***** Terminal
:PROPERTIES:
:ID:       7B07A9E3-061F-4298-BF78-6B0245551995
:END:

Select the Solarized dark theme. It is checked out in Github-Anon. Go into
preferences, choose it, and set it as the default.

Set the font to DJSM 17.

*** Writing (8ef276)
:PROPERTIES:
:ID:       EFF4453A-BB19-4841-9472-D8A89700CE06
:END:
******* Plan
:PROPERTIES:
:ID:       2FE33595-5B40-44C1-BD73-CE07C7211561
:END:
**** Install via the app store
:PROPERTIES:
:ID:       35649D7F-575E-40CB-9BD5-0E19F1E72947
:END:
***** Growl
:PROPERTIES:
:ID:       5CE4AAF3-E82F-47E0-9F49-F65CECE1C838
:END:

- Start it
- enable run on login
- top left corner
- crystal

**** Emacs and supporting apps
:PROPERTIES:
:ID:       F4DF417B-AB87-49B5-B26D-B202C1F98640
:END:

Run the script or paste it in.

It should be idempotent.

The =xquartz= installer takes 5 minutes.

#+NAME: 34E00A11-AB89-4C94-B52E-7B4C94401252
#+BEGIN_SRC sh :tangle ./install-emacs-and-stuff.sh
brew cask install xquartz
read -p "Review the installation. Press return to continue."
brew cask install growlnotify
read -p "Review the installation. Press return to continue."
brew install ccrypt
read -p "Review the installation. Press return to continue."
brew install aspell -all
read -p "Review the installation. Press return to continue."
brew install imagemagick --with-fftw --with-fontconfig --with-webp --with-x11
read -p "Review the installation. Press return to continue."
brew install emacs --with-cocoa --with-gnutls --with-imagemagick
read -p "Review the installation. Press return to continue."
brew install graphviz
read -p "Review the installation. Press return to continue."
brew install pandoc
read -p "Review the installation. Press return to continue."
brew linkapps
#+END_SRC

Note:
#+BEGIN_QUOTE
==> ./configure --prefix=/usr/local/Cellar/emacs/24.5 --enable-locallisppath=/usr/local/share/emacs/
==> make
==> make install
==> Caveats
A command line wrapper for the cocoa app was installed to:
  /usr/local/Cellar/emacs/24.5/bin/emacs

To have launchd start emacs at login:
  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/emacs/*.plist ~/Library/LaunchAgents
Then to load emacs now:
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.emacs.plist
.app bundles were installed.
Run `brew linkapps emacs` to symlink these to /Applications.
==> Pouring pandoc-1.15.2.1.el_capitan.bottle.tar.gz
==> Caveats
Bash completion has been installed to:
  /usr/local/etc/bash_completion.d
#+END_QUOTE

**** Install Org Mode and supporting stuff per HELP
:PROPERTIES:
:ID:       63AFF6C1-2214-44F2-9069-BA156C1D322E
:END:

This script should be idempotent.

#+NAME: 916D6512-03E7-4971-8BAC-53D6FA258BBD
#+BEGIN_SRC shell :tangle ./org-and-stuff.sh
set -x
rm -rf ~/src/org-mode
rm -rf ~/src/org2blog
rm -rf ~/src/use-package
cd ~/src
git clone git://orgmode.org/org-mode.git
cd org-mode
emacs -batch -Q -L lisp -l ../mk/org-fixup -f org-make-autoloads
cd ~/src
git clone github-grettke:punchagan/org2blog.git
cd ~/src
git clone https://github.com/jwiegley/use-package.git
#+END_SRC

**** EELIB
:PROPERTIES:
:ID:       65AD0341-DCA6-42E8-9768-3DA41A274F8F
:END:

- Make a directory =~/EELIB=
  #+NAME: 19FF07B8-3DFE-4CC4-9ABA-9BED5C430F02
  #+BEGIN_SRC shell
  mkdir ~/EELIB
  #+END_SRC
- Download the following JAR files to that folder
- [[http://plantuml.com/][PlantUML]] to it, either downloading the unversioned JAR or
   renaming it to "plantuml.jar"
- [[http://ditaa.sourceforge.net/][ditaa]] to it, extract the versioned JAR, and rename it to "ditaa.jar"
- [[https://www.languagetool.org/][LanguageTool]]
  - Use the "daily build" if the download is too slow
  - Extract it here
  - Rename the directory to "LanguageTool"
  - Took 8 tries to download it; kept stalling at 80%

**** Profile
:PROPERTIES:
:ID:       D0B61BD6-13D8-4569-8696-30256456A05C
:END:

Now everything is in place for the new profile. The new profile is required
to continue installation

#+NAME: B2E241B5-2075-4CD8-BF41-C0D22FAE8233
#+BEGIN_SRC shell :tangle ./profile-final :noweb yes :comments no
<<pbod1>>
export INFOPATH='/usr/local/share/info:/usr/share/info'
export CCRYPT="/usr/local/Cellar/ccrypt/1.10/share/emacs/site-lisp"
export EELIB="/Users/$(whoami)/EELIB"
export MACTEX_BIN="/usr/local/texlive/2015/bin/x86_64-darwin"
export PATH=<<ppathpre>>:$MACTEX_BIN:<<ppathpost>>
alias e='open /Applications/Emacs.app --args --debug-init'
alias ec='/usr/local/Cellar/emacs/24.5/Emacs.app/Contents/MacOS/Emacs -nw --debug-init'
#+END_SRC

Source it or start a new shell or run this; it should be idempotent.

#+NAME: 4E3EF76D-AD57-40C5-B9D6-CC9080576293
#+BEGIN_SRC shell :tangle ./new-profile.sh :comments no
set -x
rm ~/.profile
cp /Volumes/VMware\ Shared\ Folders/Storage/wip/profile-final ~/.profile
. ~/.profile
cat ~/.profile
#+END_SRC

Can't test MacTeX yet.

**** MacTex & GnuPlot
    :PROPERTIES:
    :ID:       4769C0C6-AA8F-4073-B233-253691004873
    :header-args: :tangle ./mactex-gnuplot.sh
    :END:

This is 2.4 GiB. That is not much. If you get the US mirror it is 20 minutes or
2 hours. The Torrent is a better option.

Read the installation directions and install it.

- Update your installation for OS X 10.11 via
  https://tug.org/mactex/UpdatingForElCapitan.pdf
  - Updated the texlive utility to point in the right place, it was at 1.21,
    fix is in 1.23
    #+BEGIN_QUOTE
    For previous versions of TEX Live Utility Open TEX Live Utility Preferences
    and click on the Choose. . . button as in Figure (4). That opens a file
    chooser. Type Shift-Cmd-G, enter ~/Library/TeX~ into the dialog box as shown in
    Figure (5) and then press Return. Finally Double-Click on ~texbin~.
    #+END_QUOTE

- tex live utility
  - Set paper size

From here either use the script which should be idempotent or copy and paste.

Set up my TeX stuff for KOMA-script. Backup the default configuration first.

#+NAME: F70EC578-023C-45CD-A584-F00AE7D33400
#+begin_src sh
set -x
ls /usr/local/texlive/2015
sudo cp /usr/local/texlive/2015/texmf.cnf /usr/local/texlive/2015/texmf.cnf-`date '+%Y_%m_%d__%H_%M_%S'`
ls /usr/local/texlive/2015
sudo tlmgr conf texmf TEXMFHOME ~/git/bitbucket/texmf/
#+end_src

Check that the path is really updated.

#+NAME: 34890901-8E9D-46E5-9738-2718CD26908E
#+begin_src sh
kpsewhich KomaDefault.lco
#+end_src

The documents say to maybe do the following. I did it.

#+NAME: 008DCE01-EE0D-4A96-93A5-7B6E91D7C951
#+begin_src sh
sudo mktexlsr
#+end_src

***** Install GNUPlot
:PROPERTIES:
:ID:       F66605AC-4989-481C-986A-2879A7F32F33
:END:

Once that is installed, install gnuplot.

#+NAME: FB8E0242-CDD6-45E4-86A7-10871990595A
#+begin_src sh
brew install gnuplot --with-latex --with-pdflib-lite --with-test --with-x11
#+end_src

Note:
#+BEGIN_QUOTE
==> Pouring lua-5.2.4_1.el_capitan.bottle.tar.gz
==> Caveats
Please be aware due to the way Luarocks is designed any binaries installed
via Luarocks-5.2 AND 5.1 will overwrite each other in /usr/local/bin.

This is, for now, unavoidable. If this is troublesome for you, you can build
rocks with the `--tree=` command to a special, non-conflicting location and
then add that to your `$PATH`.
#+END_QUOTE

**** Dotfiles
:PROPERTIES:
:ID:       6B76A015-45CC-4FB7-B075-0D3DDA2C22EA
:END:

This script should be idempotent.

Link Emacs dot files to their implementation.

#+NAME: C86B35D4-0009-499F-A779-5E148FF231FB
#+BEGIN_SRC sh :tangle ./link-emacs-dotfiles.sh
rm ~/.emacs.el
ln -s ~/src/help/.emacs.el ~/.emacs.el
rm ~/.aspell.en.pws
ln -s ~/git/bitbucket/list/.aspell.en.pws ~/.aspell.en.pws
rm ~/.aspell.en.prepl
ln -s ~/git/bitbucket/list/.aspell.en.prepl ~/.aspell.en.prepl
rm -rf ~/.emacs.d
mkdir ~/.emacs.d
ln -s ~/src/help/eshell/ ~/.emacs.d/eshell
#+END_SRC
**** Test stuff out: using HELP and help.org
:PROPERTIES:
:ID:       B1B9A22B-578D-4DFA-9A8A-803AB11A8D0D
:END:

- [X] Get Emacs running
  - Usually problems with package loads
    - EG dimnish, =list-package= and install it and restart
    - =lexbind-mode= refuses to install
      - "Symbol's function definition is void: lexbind-mode"
      - Start with =--no-init= and comment out =lexbind-mode= just to get Emacs
        set up, then install =lexbind= via the package manager, then add it
        back in
    - Broken Org-Mode
      - This checks out Org-Mode from the trunk. Sometimes stuff get's
        broken. My config debugs on error. The goal is to always have
        a working system. Sometimes, I copy over a working copy of Org
        or any of the libraries onto the host if there are issues.
- [X] tangle
  - Tangle the document successfully
- [X] execution
  - Delete every result block: just do it manually search for =#+RESULT=
  - Delete all image output
  - Execute entire document successfully
  - Images re-appear
- [X] eshell
  - Run it
  - Emacs uses correct HELP directory
- [X] ccrypt
- [X] ispell
- [X] weasel words
- [X] langtool
  - Verify installation, can have the wrong dir and the tool just says that
    there are no issues
  - Run =langtool-check-buffer=
  - qkc does the scan, qkC suggests corrects, verified on a corresponsence
- [X] Correspondence
  - Pick a letter
  - Address and signature and everything looks right
- [X] Messages
  - Make sure that there are no startup warnings or issues
- [X] Export to everything
  - Longest test
  - This is used for publishing
  - First delete everything
  - [X] html
    - Images are links, not images
  - [X] md
    - Images are links, not images
  - [X] pdf
  - [X] txt

* Preparation
:PROPERTIES:
:ID:       1BF6D42F-2F80-467E-B75C-DB2C88F0B4BE
:END:

** External Drive
:PROPERTIES:
:ID:       9EC3FF1F-8416-449D-8860-3B4ABCEBB09B
:END:

Get a 7200RPM 1TB external disk drive with USB3 or Lightning.

Create a partition named =Storage= that is at least 100GB. The =EXT:= naming
convention is to indicate that it lives on an external device. This is helpful
to make sense of partitions there versus on the Macintosh HD. That is not part
of the name of the partition itself. I'll use that naming also to indicate
computers that contain a single disk drive.

** Software
:PROPERTIES:
:ID:       3BC9B846-919F-4395-8926-8C2AABB0FF6A
:END:
*** Carbon Copy Cloner (CCC)
:PROPERTIES:
:ID:       93F797EC-1166-4667-A2ED-C8251CB9998A
:END:

[[https://bombich.com/][Purchase]] the latest version that supports El Capitan. Download it along with the
license to =EXT:Storage=. Install it on the =Support Computer=.
*** VMWare Fusion
:PROPERTIES:
:ID:       B846A16A-4E1C-4968-B303-301923989BD8
:END:

[[https://www.vmware.com/products/fusion][Purchase]] a copy and download it to =EXT:Storage=. Download your license key.

** Support Computer
:PROPERTIES:
:ID:       74903C97-520F-4FE1-B2AA-09F1DAB976D7
:END:

Keep a working Mac nearby. You will use it to work with the contents of
your Git repositories, research configuration steps, and rest easy knowing that
you've always got a working machine.

Make sure that it has Internet access and download all of your Git repositories
required for configuring these machines.

Don't try use your host computer for this role by booting it to an external
drive; it is too easy to confuse partitions and what you are doing.

Use CCC to clone this Mac's partition, =Support:Macintosh HD=, to a partition on
=EXT=. The easiest thing to do is to connect =EXT=
to =Support Computer=. Create a new partition big enough to hold it and perform
the clone. Name it =EXT:Utility=. Reboot to it to test it.

** Host Computer: 44fad7
:PROPERTIES:
:ID:       EE23E7E0-4BAC-4B57-96EA-764F84A2F054
:END:

- Collect the Pristine Host Operating System Image (PHOSI)
  - Pristine means that it has never been logged into or configured
  - Has the latest OS X on it with at least the second fix pack or later
  - Verify that it contains Recovery Partition for that OS X on the disk
    - If the imaging takes less than 10 minutes then they didn't include the
      Recovery Partition
  - You can easily get this from an appointment at the Genius Bar
- Create the Pristine Host Operating System Disk Image (PHOSDI)
  - Take your Mac home
  - Boot from =EXT:Utility=
  - Use CCC
    - From the host computer's =PHOSI=, =Host:Macintosh HD=
    - To
      - A new =PHOSDI=; *read-only* and *compressed* disk image
      - Located on =EXT:Storage=
    - Execute the imaging task
- Test =PHOSDI=
  - Boot into =Host:Macintosh HD=, configure it
  - Boot into =EXT:Support= and re-image =Host:Macintosh HD= from =PHOSDI=
  - Boot into =Host:Macintosh HD=
    - It should appear pristine, you need to enter all of the installation
      information again. This will be re-imaged again soon so don't worry
      about this.
  - Copy =EXT:Storage PHOSDI= to =Host:Storage=
- Create the =Host:Utility= partition using =PHOSDI=
  - Boot into =EXT:Support=
  - Create 1 new partition on =Host=, named =Utility=: 16GB
    - Now there are 3: =Macintosh HD=, =Support=, and =Utility=
  - Verify that you can
    - Boot into =Host:Support=
    - Install CCC
    - Access the =Storage= partition
      - CCC images
      - Disk images
      - Software
      - Scripts
